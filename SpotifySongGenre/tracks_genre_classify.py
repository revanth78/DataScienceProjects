# -*- coding: utf-8 -*-
"""tracks_genre_classify.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1plmoixLuapXXPXgvbzBqT5japJjl4J1_
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("train.csv")
df.head(5)

print(type(df))

df1 = df.drop(['Unnamed: 0', 'track_id', 'artists', 'album_name','track_name', 'popularity', 'explicit','key','mode','time_signature'],  axis = 'columns')

df1.head(5)

genre_names = df1['track_genre'].unique()
print(genre_names)

drop_genre = ['acoustic', 'afrobeat', 'alt-rock', 'alternative', 'ambient', 'anime',
              'black-metal', 'bluegrass', 'blues', 'brazil', 'breakbeat', 'british',
              'cantopop', 'chicago-house', 'children', 'chill', 'club', 'comedy',
              'country', 'dance', 'dancehall', 'death-metal', 'deep-house', 'detroit-techno',
              'disney', 'drum-and-bass', 'dub', 'dubstep', 'edm', 'electro',
              'electronic', 'emo', 'folk', 'forro', 'french', 'funk', 'garage', 'german',
              'gospel', 'goth', 'grindcore', 'groove', 'grunge', 'guitar', 'happy',
              'hard-rock', 'hardcore', 'hardstyle', 'heavy-metal', 'honky-tonk',
              'house', 'idm', 'indie-pop', 'indie', 'industrial', 'iranian',
              'j-dance', 'j-idol', 'j-pop', 'j-rock', 'k-pop', 'kids', 'latin',
              'latino', 'malay', 'mandopop', 'metal', 'metalcore', 'minimal-techno', 'mpb',
              'new-age', 'opera', 'pagode', 'party', 'piano', 'pop-film', 'power-pop',
              'progressive-house', 'psych-rock', 'punk-rock', 'punk', 'r-n-b', 'reggae',
              'reggaeton', 'rock-n-roll', 'rockabilly', 'romance', 'sad', 'salsa',
              'samba', 'sertanejo', 'show-tunes', 'singer-songwriter', 'ska', 'sleep',
              'songwriter', 'soul', 'spanish', 'study', 'swedish', 'synth-pop', 'tango',
              'techno', 'trance', 'trip-hop', 'turkish', 'world-music']

wanted_genre = ~df1["track_genre"].isin(drop_genre)
df1 = df1[wanted_genre]

df1.shape
print(type(df1))
print(df1.head())

df1.shape

df1['track_genre'].unique()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
le.fit_transform(df1['track_genre'])

X = df1.drop(['track_genre'], axis = 'columns')

y = df1['track_genre']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y, random_state=42, test_size=0.2)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(random_state=1)
model.fit(X_train, y_train)

model.feature_importances_

from sklearn.metrics import roc_auc_score
y_pred = model.predict_proba(X_test)
roc_auc_score(y_test, y_pred, multi_class='ovr')

import pickle
with open('model.pkl', 'wb') as f:
  pickle.dump(model, f)