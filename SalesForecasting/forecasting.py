# -*- coding: utf-8 -*-
"""forecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gnaygn4xZ4tiuFAUNdcFUZRnL0SYtM8X
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("perrin-freres-monthly-champagne-.csv")
df.head()

df.columns = ['Month', 'Sales']

df.tail()

df.dropna(inplace=True)

df.tail()

df['Month'] = pd.to_datetime(df['Month'])

df.head()

df.set_index('Month', inplace = True)

df.head()

"""Visualising"""

df.plot()

from statsmodels.tsa.stattools import adfuller

test_result = adfuller(df['Sales'])

# Ho : It is non stationary
# H1 : It is stationary

def adfuller_test(sales):
  result = adfuller(sales)
  labels = ['ADF Test Statistic', 'p-value', 'Lags used', 'Number of Observations Used']
  for value, label in zip(result,labels):
    print(label+' : '+str(value))
  if result[1] <= 0.05:
    print("strong evidence against the null hypothesis, reject the null hypothesis.It is stationary")
  else:
    print("Weak Evidence against null hypothesis, It is non stationary")

adfuller_test(df['Sales'])

"""Differencing"""

df['Sales First Difference'] = df['Sales'] - df['Sales'].shift(1)

df['Seasonal First Difference'] = df['Sales'] - df['Sales'].shift(12)

df.head()

adfuller_test(df['Seasonal First Difference'].dropna())

df['Seasonal First Difference'].plot()

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf



"""Final Thoughts on Autocorrelation and Partial Autocorrelation

  Identification of an AR model is often
  best done with the PACF.

  Put another way, the number of non-zero partial autocorrelations gives the order of the AR model. By the “order of the model” we mean the most extreme lag of x that is used as a predictor.

  Identification of an MA model is often best done with the ACF rather than the PACF. p,d,q

  For an MA model, the theoretical PACF does not shut off, but instead tapers toward 0 in some manner. A clearer pattern for an MA model is in the ACF. The ACF will have non-zero autocorrelations only at lags involved in the model.
  
p AR model lags d differencing q MA lags
"""

fig = plt.figure(figsize=(12,8))
ax1 = fig.add_subplot(211)
fig = sm.plot_acf(df['Seasonal First Difference'].iloc[13:],lags=40,ax=ax1)
ax2 = fig.add_subplot(212)
fig = sm.plot_pacf(df['Seasonal First Difference'].iloc[13:],lags=40,ax=ax2)

# p = 1, d= 1, q= 0 or 1
from

!pip install statsmodels

from statsmodels.tsa.statespace.sarimax import SARIMAX

model = SARIMAX(df['Sales'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
results = model.fit()

df['forecast'] = results.predict(start=90,end=103,dynamic=True)
df[['Sales','forecast']].plot(figsize=(12,8))